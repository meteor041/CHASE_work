{
  "db_id": "movie_platform",
  "question": "Name the movie with the most ratings.",
  "evidence": "movie with the most rating refers to MAX(SUM(rating_score));",
  "schema_linking": {
    "movies": [
      "movies",
      "movie_url",
      "movie_id",
      "movie_title",
      "movies",
      "movie_popularity"
    ],
    "ratings": [
      "movie_id",
      "ratings",
      "rating_url",
      "ratings",
      "rating_url",
      "rating_score",
      "rating_id"
    ],
    "lists": [
      "lists"
    ],
    "ratings_users": [
      "ratings_users"
    ]
  },
  "sql": "SELECT m.movie_title\n   FROM movies m\n   JOIN (\n       SELECT ratings.movie_id, SUM(ratings.rating_score) AS total_score\n       FROM ratings\n       GROUP BY ratings.movie_id\n   ) r ON m.movie_id = r.movie_id\n   ORDER BY r.total_score DESC\n   LIMIT 1;",
  "text": "\n\n\nAlright, let's tackle this query step by step. The user wants to find the movie with the most ratings. First, I need to understand what \"most ratings\" means here. The hint says it refers to MAX(SUM(rating_score)), so I guess we need to calculate the total rating score for each movie and then find the one with the highest sum.\n\nLooking at the schema, there's a 'ratings' table with columns like movie_id, rating_score, and others. The'movies' table has movie_id and movie_title. So, I'll need to join these two tables on movie_id. \n\nNext, I should group the ratings by movie_id to sum up the rating scores for each movie. Then, I'll use the MAX function on the summed values to find the highest total. But wait, MAX(SUM(...)) might not be the right approach here. Actually, I think I need to calculate the sum for each movie first and then find the maximum of those sums. That would give the movie with the highest total rating score.\n\nOnce I have the maximum sum, I need to find which movie corresponds to that sum. So, I'll need to select the movie_title from the movies table where the movie_id matches the one with the highest sum. \n\nI should also check if there are multiple movies with the same maximum sum. The question doesn't specify, so I'll assume it's okay to return one, but maybe using LIMIT 1 would help if there's a tie. However, the user might want all movies with the highest sum. Hmm, the original question says \"the movie,\" so maybe it's expecting a single one. \n\nPutting it all together, I'll first calculate the sum of rating_scores per movie, then find the maximum sum, and finally get the movie title associated with that sum. I'll need to join the movies and ratings tables, group by movie_id, sum the rating_scores, then order by that sum in descending order and pick the top result. Alternatively, using a subquery to find the max sum and then matching it with the movie.\n\nWait, the schema linking results mention \"ratings\" and \"movies\" tables. Let me confirm the columns again. The ratings table has movie_id and rating_score. The movies table has movie_id and movie_title. So, joining on movie_id is correct.\n\nSo the steps are: join movies and ratings on movie_id, group by movie_id, sum rating_score, then select the movie with the highest sum. That should give the movie with the most ratings based on the sum of rating scores.\n### Query Plan:\n1. **Understand the intent**:  \n   The user wants to identify the **movie with the highest total rating score**, calculated as the **maximum sum of rating_score** across all ratings.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `movie_id`, `rating_score`  \n   - From `movies` table: `movie_id`, `movie_title`  \n\n3. **Identify filter conditions**:  \n   - No explicit filters, but need to group by `movie_id` to aggregate ratings.  \n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Aggregate `SUM(rating_score)` per `movie_id`.  \n   - Identify the movie with the **maximum** aggregated value.  \n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `movies` and `ratings` on `movies.movie_id = ratings.movie_id` to link movie titles with their ratings.  \n\n6. **Build subqueries if required**:  \n   - Subquery to calculate the summed rating scores per movie.  \n   - Outer query to select the movie with the maximum sum.  \n\n7. **Formulate final SQL query**:\n   ```sql\n   SELECT m.movie_title\n   FROM movies m\n   JOIN (\n       SELECT ratings.movie_id, SUM(ratings.rating_score) AS total_score\n       FROM ratings\n       GROUP BY ratings.movie_id\n   ) r ON m.movie_id = r.movie_id\n   ORDER BY r.total_score DESC\n   LIMIT 1;\n   ```\nFinal SQL:\n```sql\nSELECT m.movie_title\nFROM movies m\nJOIN (\n    SELECT ratings.movie_id, SUM(ratings.rating_score) AS total_score\n    FROM ratings\n    GROUP BY ratings.movie_id\n) r ON m.movie_id = r.movie_id\nORDER BY r.total_score DESC\nLIMIT 1;\n```"
}