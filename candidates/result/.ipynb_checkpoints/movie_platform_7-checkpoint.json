{
  "db_id": "movie_platform",
  "question": "What is the percentage of the ratings were rated by user who was a subcriber?",
  "evidence": "user is a subscriber refers to user_subscriber = 1; percentage of ratings = DIVIDE(SUM(user_subscriber = 1), SUM(rating_score)) as percent;",
  "schema_linking": {
    "ratings": [
      "ratings",
      "rating_url",
      "rating_id",
      "rating_score",
      "ratings",
      "rating_url",
      "rating_score",
      "rating_id",
      "ratings",
      "rating_id",
      "rating_score",
      "rating_url",
      "user_id",
      "user_subscriber"
    ],
    "movies": [
      "movie_popularity"
    ],
    "ratings_users": [
      "ratings_users",
      "ratings_users",
      "user_id",
      "user_trialist",
      "user_subscriber",
      "user_avatar_image_url"
    ],
    "lists": [
      "user_id"
    ],
    "lists_users": [
      "user_id",
      "user_subscriber",
      "user_avatar_image_url"
    ]
  },
  "sql": "SELECT \n  ROUND(\n    (SUM(CASE WHEN ratings_users.user_subscriber = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) \n   , 2\n  ) AS subscriber_rating_percentage\nFROM \n  ratings\nJOIN \n  ratings_users ON ratings.user_id = ratings_users.user_id;",
  "text": " [Start Output]\n\nQuery Plan:\n\n1. **Understand the intent**:  \n   The user is asking for the **percentage of ratings** that were given by users who are **subscribers**. This requires calculating the ratio of subscriber ratings to the total number of ratings.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `rating_score` (used for total ratings count)\n   - From `ratings_users` table: `user_id`, `user_subscriber` (to identify subscriber users)\n\n3. **Identify filter conditions**:  \n   - Filter ratings to include only those where the corresponding user is a subscriber (`user_subscriber = 1`).\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Calculate the **total number of ratings** using `SUM(rating_score)` (though this might be a misinterpretation, as `rating_score` likely represents the score, not the count of ratings).\n   - Calculate the **number of subscriber ratings** using `SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END)` to count subscriber ratings.\n   - Compute the **percentage** as `ROUND((subscriber_ratings / total_ratings) * 100, 2)`.\n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `ratings` with `ratings_users` on `ratings.user_id = ratings_users.user_id` to link ratings to user subscription status.\n\n6. **Build subqueries if required**:  \n   - No subqueries needed, as the calculation can be done in a single query.\n\n7. **Formulate the final SQL query**:  \n   - Use a `JOIN` to link ratings and user subscription status.\n   - Use conditional aggregation to count subscriber ratings and total ratings.\n   - Compute the percentage using division and formatting.\n\nFinal SQL:\n```sql\nSELECT \n  ROUND(\n    (SUM(CASE WHEN ratings_users.user_subscriber = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) \n   , 2\n  ) AS subscriber_rating_percentage\nFROM \n  ratings\nJOIN \n  ratings_users ON ratings.user_id = ratings_users.user_id;\n``` [Start Output]\n\nQuery Plan:\n\n1. **Understand the intent**:  \n   The user is asking for the **percentage of ratings** that were given by users who are **subscribers**. This requires calculating the ratio of subscriber ratings to the total number of ratings.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `user_id` (to link to user subscription status)\n   - From `ratings_users` table: `user_id`, `user_subscriber` (to identify subscriber users)\n\n3. **Identify filter conditions**:  \n   - No explicit filter conditions are needed, as we are calculating the percentage across all ratings.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Calculate the **total number of ratings** using `COUNT(*)`.\n   - Calculate the **number of subscriber ratings** using `SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END)`.\n   - Compute the **percentage** as `ROUND((subscriber_ratings / total_ratings) * 100, 2)`.\n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `ratings` with `ratings_users` on `ratings.user_id = ratings_users.user_id` to link ratings to user subscription status.\n\n6. **Build subqueries if required**:  \n   - No subqueries needed, as the calculation can be done in a single query.\n\n7. **Formulate the final SQL query**:  \n   - Use a `JOIN` to link ratings and user subscription status.\n   - Use conditional aggregation to count subscriber ratings and total ratings.\n   - Compute the percentage using division and formatting.\n\nFinal SQL:\n```sql\nSELECT \n  ROUND(\n    (SUM(CASE WHEN ratings_users.user_subscriber = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) \n   , 2\n  ) AS subscriber_rating_percentage\nFROM \n  ratings\nJOIN \n  ratings_users ON ratings.user_id = ratings_users.user_id;\n``` [Start Output]\n\nQuery Plan:\n\n1. **Understand the intent**:  \n   The user is asking for the **percentage of ratings** that were given by users who are **subscribers**. This requires calculating the ratio of subscriber ratings to the total number of ratings.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `user_id` (to link to user subscription status)\n   - From `ratings_users` table: `user_id`, `user_subscriber` (to identify subscriber users)\n\n3. **Identify filter conditions**:  \n   - No explicit filter conditions are needed, as we are calculating the percentage across all ratings.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Calculate the **total number of ratings** using `COUNT(*)`.\n   - Calculate the **number of subscriber ratings** using `SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END)`.\n   - Compute the **percentage** as `ROUND((subscriber_ratings / total_ratings) * 100, 2)`.\n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `ratings` with `ratings_users` on `ratings.user_id = ratings_users.user_id` to link ratings to user subscription status.\n\n6. **Build subqueries if required**:  \n   - No subqueries needed, as the calculation can be done in a single query.\n\n7. **Formulate the final SQL query**:  \n   - Use a `JOIN` to link ratings and user subscription status.\n   - Use conditional aggregation to count subscriber ratings and total ratings.\n   - Compute the percentage using division and formatting.\n\nFinal SQL:\n```sql\nSELECT \n  ROUND(\n    (SUM(CASE WHEN ratings_users.user_subscriber = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) \n   , 2\n  ) AS subscriber_rating_percentage\nFROM \n  ratings\nJOIN \n  ratings_users ON ratings.user_id = ratings_users.user_id;\n``` [Start Output]\n\nQuery Plan:\n\n1. **Understand the intent**:  \n   The user is asking for the **percentage of ratings** that were given by users who are **subscribers**. This requires calculating the ratio of subscriber ratings to the total number of ratings.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `user_id` (to link to user subscription status)\n   - From `ratings_users` table: `user_id`, `user_subscriber` (to identify subscriber users)\n\n3. **Identify filter conditions**:  \n   - No explicit filter conditions are needed, as we are calculating the percentage across all ratings.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Calculate the **total number of ratings** using `COUNT(*)`.\n   - Calculate the **number of subscriber ratings** using `SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END)`.\n   - Compute the **percentage** as `ROUND((subscriber_ratings / total_ratings) * 100, 2)`.\n\n5. **Handle joins if multiple tables are needed**:  \n  "
}