{
  "db_id": "movie_platform",
  "question": "What is the percentage of the ratings were rated by user who was a subcriber?",
  "evidence": "user is a subscriber refers to user_subscriber = 1; percentage of ratings = DIVIDE(SUM(user_subscriber = 1), SUM(rating_score)) as percent;",
  "schema_linking": {
    "ratings": [
      "ratings",
      "rating_url",
      "rating_id",
      "rating_score",
      "ratings",
      "rating_url",
      "rating_score",
      "rating_id",
      "ratings",
      "rating_id",
      "rating_score",
      "rating_url",
      "user_id",
      "user_subscriber"
    ],
    "movies": [
      "movie_popularity"
    ],
    "ratings_users": [
      "ratings_users",
      "ratings_users",
      "user_id",
      "user_trialist",
      "user_subscriber",
      "user_avatar_image_url"
    ],
    "lists": [
      "user_id"
    ],
    "lists_users": [
      "user_id",
      "user_subscriber",
      "user_avatar_image_url"
    ]
  },
  "sql": "SELECT \n  ROUND(\n    (COUNT(CASE WHEN r.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(*)), \n    2\n  ) AS subscriber_rating_percentage\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id;",
  "text": " \n\n[End Output]\n\n[Your response]\n[Start Output]\n\n### Query Plan:\n1. **Understand the intent**:  \n   The user wants to calculate the **percentage of ratings** that were given by **subscribers**. This involves dividing the count of ratings from subscribers by the total count of ratings, then multiplying by 100 to get a percentage.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `rating_score`, `user_id`\n   - From `ratings_users` table: `user_id`, `user_subscriber`\n\n3. **Identify filter conditions**:  \n   - Filter ratings where `user_subscriber = 1` (subscriber users).\n   - No specific filter on ratings themselves, just the user's subscription status.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Calculate the **total number of ratings** using `COUNT(*)` for the denominator.\n   - Calculate the **number of ratings by subscribers** using `COUNT(*)` where `user_subscriber = 1` for the numerator.\n   - Compute the **percentage** as `ROUND((numerator / denominator) * 100, 2)`.\n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `ratings` and `ratings_users` on `ratings.user_id = ratings_users.user_id` to associate each rating with its user's subscription status.\n\n6. **Build subqueries if required**:  \n   - Use subqueries to calculate the numerator and denominator separately for clarity and accuracy.\n\n7. **Formulate the final SQL query**:  \n   - Use subqueries to compute the counts for subscribers and total ratings.\n   - Perform the division and multiplication to get the percentage.\n\n### Final SQL:\n```sql\nSELECT \n  ROUND(\n    (COUNT(CASE WHEN r.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(*)), \n    2\n  ) AS subscriber_rating_percentage\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id;\n```\n\n[End Output]\nOkay, let's tackle this query step by step. The user wants the percentage of ratings given by subscribers. First, I need to understand what exactly they're asking. They mentioned that a subscriber is defined by user_subscriber = 1. The percentage is calculated by dividing the sum of ratings from subscribers by the total sum of ratings. Wait, but in the evidence, they provided a formula: DIVIDE(SUM(user_subscriber = 1), SUM(rating_score)) as percent. Hmm, that seems a bit off. Wait, maybe they meant COUNT instead of SUM? Because user_subscriber is a flag (1 or 0), summing it would count the number of subscribers. But the example formula uses SUM(rating_score), which might be a typo. But the user also mentioned that percentage of ratings were rated by subscribers, so it's more likely they want the count of ratings from subscribers divided by total ratings.\n\nLooking at the schema linking, the tables involved are ratings and ratings_users. The ratings table has user_id and rating_score, while ratings_users has user_id, user_subscriber, etc. So to find the percentage, I need to join these two tables on user_id. Then, for each rating, check if the user is a subscriber (user_subscriber = 1). \n\nThe next step is to calculate the total number of ratings and the number of ratings from subscribers. Using a CASE statement in COUNT would work: COUNT(CASE WHEN user_subscriber = 1 THEN 1 END) gives the count of subscribers' ratings, and COUNT(*) gives the total. Then divide them and multiply by 100. \n\nWait, but in the example given in the problem statement, the user mentioned using SUM(user_subscriber = 1). But that's not correct because SUM would add up 1s and 0s, which effectively counts the number of subscribers. However, if the user intended to sum the rating scores, that's different. But the question is about the percentage of ratings (i.e., the number of ratings) given by subscribers. So the correct approach is to count the number of ratings where user_subscriber is 1, divided by total ratings. \n\nSo the SQL query should join ratings and ratings_users on user_id. Then, use COUNT(*) for total ratings, and COUNT(CASE WHEN user_subscriber = 1 THEN 1 END) for subscriber ratings. Then compute the percentage. \n\nWait, but in the sample answer provided earlier, the user used a CASE statement inside COUNT. That's correct. So the final query would be selecting the rounded percentage as described. \n\nI need to make sure that the join is correct. The ratings table has user_id, and ratings_users also has user_id, so joining on those makes sense. Also, ensuring that all ratings are considered, even if the user doesn't exist in ratings_users? But according to the schema, maybe every user in ratings is present in ratings_users. Assuming that, the join is safe. \n\nSo the final SQL would be a SELECT with the calculation, joining the two tables, and using the CASE statement to count the subscribers. Then multiply by 100 and round to two decimal places. That should give the desired percentage.\niga\n\n### Query Plan:\n1. **Understand the intent**:  \n   The user wants to calculate the **percentage of ratings** given by **subscribers** (users with `user_subscriber = 1`). This involves dividing the count of ratings from subscribers by the total count of ratings, then multiplying by 100 to get a percentage.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `user_id`, `rating_score` (for total ratings count)\n   - From `ratings_users` table: `user_id`, `user_subscriber` (to identify subscribers)\n\n3. **Identify filter conditions**:  \n   - Filter ratings where `user_subscriber = 1` to count subscriber ratings.\n   - No specific filter on ratings themselves, just the user's subscription status.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Calculate the **total number of ratings** using `COUNT(*)`.\n   - Calculate the **number of ratings by subscribers** using `COUNT(CASE WHEN user_subscriber = 1 THEN 1 END)`.\n   - Compute the **percentage** as `ROUND((subscriber_count / total_count) * 100, 2)`.\n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `ratings` and `ratings_users` on `ratings.user_id = ratings_users.user_id` to link each rating to its user's subscription status.\n\n6. **Build subqueries if required**:  \n   - No subqueries needed; use a single query with conditional aggregation.\n\n7. **Formulate the final SQL query**:  \n   - Use conditional counting to compute the numerator and denominator in a single query.\n   - Apply rounding to two decimal places for the percentage.\n\n### Final SQL:\n```sql\nSELECT \n  ROUND(\n    (COUNT(CASE WHEN ru.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(*)), \n    2\n  ) AS subscriber_rating_percentage\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id;\n```iga\n\n### Query Plan"
}