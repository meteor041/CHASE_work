{
  "db_id": "movie_platform",
  "question": "What is the average rating for movie titled 'When Will I Be Loved'?",
  "evidence": "average rating = DIVIDE((SUM(rating_score where movie_title = 'When Will I Be Loved')), COUNT(rating_score));",
  "schema_linking": {
    "ratings": [
      "ratings",
      "rating_score",
      "rating_url",
      "rating_id",
      "movie_id",
      "movie_id"
    ],
    "ratings_users": [
      "ratings_users"
    ],
    "movies": [
      "movies",
      "movie_url",
      "movie_id",
      "movie_title",
      "movie_title",
      "movie_title_language",
      "movie_release_year",
      "director_name",
      "movie_id",
      "movies",
      "movie_release_year",
      "movie_title"
    ],
    "lists": [
      "list_title"
    ]
  },
  "sql": "block\n- No additional commentary, headers or explanations\n\n[Reference structure for Query Plan]\n1. Understand the intent\n2. Locate target tables and columns\n3. Identify filter conditions\n4. Determine aggregation, grouping, ordering\n5. Handle joins if needed\n6. Build subqueries if needed\n7. Formulate final SQL\n\n[EXAMPLE]\n\nInputs：\n\n- **Question**: \"What is the average salary of employees in the Sales department?\"\n- **Evidence** (schema):",
  "text": " [Your role]\nYou are an expert SQL query planner specialized in translating natural language questions into optimized SQL queries using a systematic Query Plan methodology.\n\n[Your task]\n1. Analyze the provided database context and question\n2. Generate a detailed, step-by-step Query Plan\n3. Produce the final executable SQL query\n\n[Strict Rules]\n- Follow the standard Query Plan structure precisely\n- Include all mandatory steps without omission\n- Output format must contain ONLY:\n  * Query Plan section\n  * Final SQL in ```sql block\n- No additional commentary, headers or explanations\n\n[Reference structure for Query Plan]\n1. Understand the intent\n2. Locate target tables and columns\n3. Identify filter conditions\n4. Determine aggregation, grouping, ordering\n5. Handle joins if needed\n6. Build subqueries if needed\n7. Formulate final SQL\n\n[EXAMPLE]\n\nInputs：\n\n- **Question**: \"What is the average salary of employees in the Sales department?\"\n- **Evidence** (schema):\n  ``` \n  Tables:\n  - employees (id, name, department_id, salary)\n  - departments (id, name)\n  ```\n- **Schema Linking**:\n  ```json\n  {\n    \"employees.salary\": \"salary\",\n    \"departments.name\": \"Sales\",\n    \"employees.department_id\": \"departments.id\"\n  }\n  ```\n\n---\n\nOutputs:\n\nQuery Plan (step-by-step reasoning):\n\n1. **Understand the intent**:  \n   The user wants the **average salary** of employees who work in the **Sales** department.\n\n2. **Locate target tables and columns**:  \n   - From `employees` table: `salary`, `department_id`\n   - From `departments` table: `id`, `name`\n\n3. **Identify filter conditions**:  \n   - The department name must be 'Sales'.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Apply `AVG(salary)` for employees in the Sales department.\n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `employees.department_id = departments.id`.\n\n6. **Build subqueries if required**:  \n   - No subqueries needed.\n\n7. **Formulate the final SQL query**:\n   ```sql\n   SELECT AVG(employees.salary)\n   FROM employees\n   JOIN departments ON employees.department_id = departments.id\n   WHERE departments.name = 'Sales';\n   ```\nFinal SQL:：\n\n```sql\nSELECT AVG(employees.salary)\nFROM employees\nJOIN departments ON employees.department_id = departments.id\nWHERE departments.name = 'Sales';\n```\n\n---\n\n[Input]\nGiven the following information:\n\n- **Database**: movie_platform\n- **Question**: What is the average rating for movie titled 'When Will I Be Loved'?\n- **Evidence** (schema and sample data): average rating = DIVIDE((SUM(rating_score where movie_title = 'When Will I Be Loved')), COUNT(rating_score));\n- **Schema Linking Results**: {\"ratings\": [\"ratings\", \"rating_score\", \"rating_url\", \"rating_id\", \"movie_id\", \"movie_id\"], \"ratings_users\": [\"ratings_users\"], \"movies\": [\"movies\", \"movie_url\", \"movie_id\", \"movie_title\", \"movie_title\", \"movie_title_language\", \"movie_release_year\", \"director_name\", \"movie_id\", \"movies\", \"movie_release_year\", \"movie_title\"], \"lists\": [\"list_title\"]}\n\n[Start Output]\n\nQuery Plan:\n1. **Understand the intent**:  \n   The user wants the **average rating** for the movie titled **'When Will I Be Loved'**.\n\n2. **Locate target tables and columns**:  \n   - From `ratings` table: `rating_score`, `movie_id`  \n   - From `movies` table: `movie_title` (to filter by the specific movie title)\n\n3. **Identify filter conditions**:  \n   - The `movie_title` must be 'When Will I Be Loved'.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Calculate the **average rating** by dividing the **sum of rating_score** by the **count of rating_score** for the specified movie.\n\n5. **Handle joins if needed**:  \n   - Join `ratings.movie_id` with `movies.movie_id` to link ratings to the movie title.\n\n6. **Build subqueries if required**:  \n   - Use a subquery to first filter the movie by title and then calculate the average rating.\n\n7. **Formulate final SQL query**:\n   ```sql\n   SELECT SUM(ratings.rating_score) / COUNT(ratings.rating_score) AS average_rating\n   FROM ratings\n   JOIN movies ON ratings.movie_id = movies.movie_id\n   WHERE movies.movie_title = 'When Will I Be Loved';\n   ```\nFinal SQL:\n```sql\nSELECT SUM(ratings.rating_score) / COUNT(ratings.rating_score) AS average_rating\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'When Will I Be Loved';\n``` [Your role]\nYou are an expert SQL query planner specialized in translating natural language questions into optimized SQL queries using a systematic Query Plan methodology.\n\n[Your task]\n1. Analyze the provided database context and question\n2. Generate a detailed, step-by-step Query Plan\n3. Produce the final executable SQL query\n\n[Strict Rules]\n- Follow the standard Query Plan structure precisely\n- Include all mandatory steps without omission\n- Output format must contain ONLY:\n  * Query Plan section\n  * Final SQL in ```sql block\n- No additional commentary, headers or explanations\n\n[Reference structure for Query Plan]\n1. Understand the intent\n2. Locate target tables and columns\n3. Identify filter conditions\n4. Determine aggregation, grouping, ordering\n5. Handle joins if needed\n6. Build subqueries if needed\n7. Formulate final SQL\n\n[EXAMPLE]\n\nInputs：\n\n- **Question**: \"What is the average salary of employees in the Sales department?\"\n- **Evidence** (schema):\n  ``` \n  Tables:\n  - employees (id, name, department_id, salary)\n  - departments (id, name)\n  ```\n- **Schema Linking**:\n  ```json\n  {\n    \"employees.salary\": \"salary\",\n    \"departments.name\": \"Sales\",\n    \"employees.department_id\": \"departments.id\"\n  }\n  ```\n\n---\n\nOutputs:\n\nQuery Plan (step-by-step reasoning):\n\n1. **Understand the intent**:  \n   The user wants the **average salary** of employees who work in the **Sales** department.\n\n2. **Locate target tables and columns**:  \n   - From `employees` table: `salary`, `department_id`\n   - From `departments` table: `id`, `name`\n\n3. **Identify filter conditions**:  \n   - The department name must be 'Sales'.\n\n4. **Determine aggregation, grouping, or ordering**:  \n   - Apply `AVG(salary)` for employees in the Sales department.\n\n5. **Handle joins if multiple tables are needed**:  \n   - Join `employees.department_id = departments.id`.\n\n6. **Build subqueries if required**:  \n   - No subqueries needed.\n\n7. **Formulate the final SQL query**:\n   ```sql\n   SELECT AVG(employees.salary)\n   FROM employees\n   JOIN departments ON employees.department_id = departments.id\n   WHERE departments.name = 'Sales';\n   ```\nFinal SQL:：\n\n```sql\nSELECT AVG(employees.salary)\nFROM"
}