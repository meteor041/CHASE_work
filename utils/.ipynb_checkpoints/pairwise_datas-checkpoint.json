[
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE supplier (\n  s_nationkey INTEGER REFERENCES nation(n_nationkey),\n  s_acctbal REAL\n);\nCREATE TABLE nation (\n  n_nationkey INTEGER,\n  n_regionkey INTEGER REFERENCES region(r_regionkey)\n);\nCREATE TABLE region (\n  r_regionkey INTEGER,\n  r_name TEXT\n);\n \n************************** \nQuestion: \nAmong the suppliers in the European region, what percentage have a below-average account balance? \nEvidence: \nDIVIDE(COUNT(s_acctbal < AVG(s_acctbal)), COUNT(s_suppkey)) as percentage where r_name = 'EUROPE'; \n************************** \nCandidate A \nSELECT CAST(SUM(IIF(T1.s_acctbal < ( SELECT AVG(s_acctbal) FROM supplier ), 1, 0)) AS REAL) * 100 / COUNT(T1.s_acctbal) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey INNER JOIN region AS T3 ON T2.n_regionkey = T3.r_regionkey WHERE T3.r_name = 'EUROPE' \nExecution result \nno such column: T3.s_acctbal \n************************** \nCandidate B \nSELECT CAST(SUM(IIF(T3.s_acctbal < ( SELECT AVG(T1.s_acctbal) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey INNER JOIN region AS T3 ON T2.n_regionkey = T3.r_regionkey WHERE T3.r_name = 'EUROPE' ), 1, 0)) AS REAL) * 100 / COUNT(T3.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey INNER JOIN region AS T3 ON T2.n_regionkey = T3.r_regionkey WHERE T3.r_name = 'EUROPE' \nExecution result \nno such column: T3.s_acctbal  \nJust output the correct answer ”A” or ”B”.",
    "label": "A"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE game_platform (\n  platform_id INTEGER REFERENCES platform(id),\n  release_year INTEGER\n);\nCREATE TABLE platform (\n  id INTEGER,\n  platform_name TEXT\n);\n \n************************** \nQuestion: \nShow the name of the earliest platform in the database. \nEvidence: \nthe earliest refers to min(release_year); name of platform refers to platform_name \n************************** \nCandidate A \nSELECT T.platform_name FROM ( SELECT T1.platform_name, MIN(T2.release_year) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id ) t \nExecution result \nnear \"(\": syntax error \n************************** \nCandidate B \nSELECT T.platform_name FROM ( SELECT T2.platform_name, MIN(T1.release_year) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id GROUP BY T2.platform_name ) T ORDER BY T.MIN(release_year) LIMIT 1 \nExecution result \nnear \"(\": syntax error  \nJust output the correct answer ”A” or ”B”.",
    "label": "A"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE director (\n  name TEXT PRIMARY KEY REFERENCES characters(movie_title),\n  director TEXT\n);\nCREATE TABLE movies_total_gross (\n  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),\n  total_gross TEXT\n);\n \n************************** \nQuestion: \nAmong all Disney movies directed by Gary Trousdale, determine the percentage that earned over USD100m based on actual grossing. \nEvidence: \nDIVIDE(COUNT(movie_title where director = 'Gary Trousdale' and total_gross > 100000000), COUNT(movie_title where director = 'Gary Trousdale')) as percentage; \n************************** \nCandidate A \nSELECT CAST(SUM(CASE WHEN T2.total_gross > 100000000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.movie_title) FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Gary Trousdale' \nExecution result \nno such column: T1.movie_title \n************************** \nCandidate B \nSELECT CAST(COUNT(CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Gary Trousdale' \nExecution result \nno such column: T1.movie_title  \nJust output the correct answer ”A” or ”B”.",
    "label": "B"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE partsupp (\n  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),\n  ps_supplycost REAL\n);\nCREATE TABLE part (\n  p_partkey INTEGER,\n  p_name TEXT\n);\n \n************************** \nQuestion: \nHow much higher in percentage is the highest supply cost of the part \"hot spring dodger dim light\" than the lowest supply cost? \nEvidence: \npart \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; percentage = divide(subtract(max(ps_supplycost), min(ps_supplycost)), min(ps_supplycost)) * 100% \n************************** \nCandidate A \nSELECT CAST((MAX(T2.ps_supplycost) - MIN(T2.ps_supplycost)) AS REAL) * 100 / MIN(T2.ps_supplycost) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'hot spring dodger dim light' \nExecution result \n[[621.8000000000001]] \n************************** \nCandidate B \nSELECT MAX(T2.ps_supplycost) - MIN(T2.ps_supplycost) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'hot spring dodger dim light' \nExecution result \n[[621.8000000000001]]  \nJust output the correct answer ”A” or ”B”.",
    "label": "A"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE zip_data (\n  state TEXT REFERENCES state(abbreviation),\n  time_zone TEXT\n);\nCREATE TABLE state (\n  abbreviation TEXT PRIMARY KEY,\n  name TEXT\n);\n \n************************** \nQuestion: \nHow many states are in the central time zone? Write their full names. \nEvidence: \ncentral time zone refers to time_zone = 'Central' \n************************** \nCandidate A \nSELECT DISTINCT T1.name FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T2.time_zone = 'Central' \nExecution result \n[['Florida'], ['Alabama'], ['Tennessee'], ['Mississippi'], ['Kentucky'], ['Indiana'], ['Michigan'], ['Iowa'], ['Wisconsin'], ['Minnesota'], ['South Dakota'], ['North Dakota'], ['Illinois'], ['Missouri'], ['Kansas'], ['Nebraska'], ['Louisiana'], ['Arkansas'], ['Oklahoma'], ['Texas']] \n************************** \nCandidate B \nSELECT SUM(CASE WHEN T1.time_zone = 'Central' THEN 1 ELSE 0 END) AS count FROM zip_data AS T1 INNER JOIN state AS T2 ON T2.abbreviation = T1.state WHERE T1.time_zone = 'Central' \nExecution result \n[['Florida'], ['Alabama'], ['Tennessee'], ['Mississippi'], ['Kentucky'], ['Indiana'], ['Michigan'], ['Iowa'], ['Wisconsin'], ['Minnesota'], ['South Dakota'], ['North Dakota'], ['Illinois'], ['Missouri'], ['Kansas'], ['Nebraska'], ['Louisiana'], ['Arkansas'], ['Oklahoma'], ['Texas']]  \nJust output the correct answer ”A” or ”B”.",
    "label": "B"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE projects (\n  projectid TEXT PRIMARY KEY,\n  schoolid TEXT,\n  school_city TEXT,\n  school_metro TEXT\n);\nCREATE TABLE resources (\n  projectid TEXT REFERENCES projects(projectid),\n  item_name TEXT\n);\nCREATE TABLE donations (\n  projectid TEXT REFERENCES projects(projectid),\n  for_honoree TEXT\n);\n \n************************** \nQuestion: \nHow many schools in Brooklyn with urban metro and donations for an honoree have requested TT992 - Refill Pack for Safety Name Tags as a resource? \nEvidence: \nin Brooklyn refers to school_city = 'Brooklyn'; urban metro refers to school_metro = 'urban'; donations for an honoree refers to for_honoree = 't'; requested TT992 - Refill Pack for Safety Name Tags refers to item_name = 'TT992 - Refill Pack for Safety Name Tags' \n************************** \nCandidate A \nSELECT COUNT(DISTINCT T1.schoolid) FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.school_city = 'Brooklyn' AND T1.school_metro = 'urban' AND T3.for_honoree = 't' AND T2.item_name = 'TT992 - Refill Pack for Safety Name Tags' \nExecution result \n[[1]] \n************************** \nCandidate B \nSELECT COUNT(DISTINCT T1.schoolid) FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.item_name LIKE 'TT992 - Refill Pack for Safety Name Tags' AND T3.for_honoree = 't' AND T1.school_city = 'Brooklyn' AND T1.school_metro = 'urban' \nExecution result \n[[1]]  \nJust output the correct answer ”A” or ”B”.",
    "label": "A"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE solution (\n);\nCREATE TABLE repo (\n);\n \n************************** \nQuestion: \nHow many solutions whose repository's stars are a third more than forks? \nEvidence: \nsolutions refers to Solution.Id; repository stars are a third more than forks = (MULTIPLY(Stars, 1/3))>Forks; \n************************** \nCandidate A \nSELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3 \nExecution result \n[[171176]] \n************************** \nCandidate B \nSELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars * 0.3 > T1.Forks \nExecution result \n[[171176]]  \nJust output the correct answer ”A” or ”B”.",
    "label": "A"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE answer (\n);\nCREATE TABLE question (\n  questiontext TEXT,\n  questionid INTEGER\n);\n \n************************** \nQuestion: \nHow many people wrote comments for the question \"Any additional notes or comments.\"? \nEvidence: \nquestion refers to questiontext; wrote comments refers to AnswerText(QuestionID = 103) ! = -1 \n************************** \nCandidate A \nSELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Any additional notes or comments' AND T1.AnswerText <> '' \nExecution result \n[[0]] \n************************** \nCandidate B \nSELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext LIKE 'Any additional notes or comments.' AND T2.AnswerText <> '-1' \nExecution result \n[[0]]  \nJust output the correct answer ”A” or ”B”.",
    "label": "A"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE genre (\n  id INTEGER,\n  genre_name TEXT\n);\nCREATE TABLE publisher (\n  id INTEGER\n);\nCREATE TABLE game_publisher (\n  game_id INTEGER REFERENCES game(id),\n  publisher_id INTEGER REFERENCES publisher(id)\n);\nCREATE TABLE game (\n  id INTEGER,\n  genre_id INTEGER REFERENCES genre(id)\n);\n \n************************** \nQuestion: \nHow many publishers have published more than 3 puzzle games? \nEvidence: \npuzzle refers to genre_name = 'Puzzle'; more than 3 puzzle games refers to count(game_id where genre_name = 'Puzzle') > 3 \n************************** \nCandidate A \nSELECT COUNT(T.publisher_id) FROM ( SELECT T1.publisher_id FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T1.publisher_id HAVING COUNT(T1.id) > 3 ) T \nExecution result \nno such column: T1.publisher_id \n************************** \nCandidate B \nSELECT COUNT(T.game_id) FROM ( SELECT T1.publisher_id, T1.game_id FROM game_publisher AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.id INNER JOIN genre AS T3 ON T2.genre_id = T3.id WHERE T3.genre_name = 'Puzzle' GROUP BY T1.publisher_id HAVING COUNT(T1.game_id) > 3 ) t \nExecution result \nno such column: T1.publisher_id  \nJust output the correct answer ”A” or ”B”.",
    "label": "B"
  },
  {
    "prompt": "Instruction: \nGiven the DB info and question, there are two candidate queries. There is correct one and incorrect one, compare the two candidate answers, analyze the differences of the query and the result. Based on the original question and the provided database info, choose the correct one. \n************************** \nDatabase Schema \nCREATE TABLE part (\n  p_size INTEGER,\n  p_name TEXT\n);\n \n************************** \nQuestion: \nWhich part has a bigger size, \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\"? \nEvidence: \nsize refers to p_size; \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\" refers to p_name in ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') \n************************** \nCandidate A \nSELECT T.p_size FROM ( SELECT p_size FROM part WHERE p_name = 'pink powder drab lawn cyan' UNION ALL SELECT p_size FROM part WHERE p_name = 'cornflower sky burlywood green beige' ) AS T ORDER BY T.p_size DESC LIMIT 1 \nExecution result \n[[44]] \n************************** \nCandidate B \nSELECT CASE WHEN SUM(CASE WHEN p_name = 'pink powder drab lawn cyan' THEN p_size ELSE 0 END) > SUM(CASE WHEN p_name = 'cornflower sky burlywood green beige' THEN p_size ELSE 0 END) THEN 'pink powder drab lawn cyan' ELSE 'cornflower sky burlywood green beige' END AS part_name FROM part \nExecution result \n[[44]]  \nJust output the correct answer ”A” or ”B”.",
    "label": "B"
  }
]